# -*- coding: utf-8 -*-
"""Copy of Midterm_Prediciton_Page.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/151rBW5hzd23mNGUIdd8OSPGpCVvogZ1E
"""

!pip install streamlit --quiet
!pip install pyngrok --quiet
!pip install hvplot --quiet
!pip install install psutil py-cpuinfo
!pip install codecarbon
!pip freeze > requirements.txt

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import seaborn as sns
# import pandas as pd
# import numpy as np
# import time
# from PIL import Image
# from sklearn import metrics
# 
# 
# from codecarbon import OfflineEmissionsTracker
# 
# 
# 
# st.title("Maternal Health Data Analysis - 03 Prediction Page ðŸ§ª")
# 
# df = pd.read_csv('Maternal Health Risk Data Set.csv')
# 
# prediction_choices = ['Logistic','KNN']
# 
# prediction_type = st.sidebar.selectbox('Select Type of Prediction', prediction_choices)
# 
# list_variables = df.columns
# select_variable =  st.sidebar.selectbox('ðŸŽ¯ Select Variable to Predict',list_variables)
# train_size = st.sidebar.number_input("Train Set Size", min_value=0.00, step=0.01, max_value=1.00, value=0.70)
# new_df= df.drop(labels=select_variable, axis=1) 
# list_var = new_df.columns
# 
# output_multi = st.multiselect("Select Explanatory Variables", list_var,default=['Age','BS'])
# 
# new_df2 = new_df[output_multi]
# x =  new_df2
# y = df[select_variable]
# 
# 
# from sklearn.preprocessing import StandardScaler
# scaler = StandardScaler()
# scaler.fit(df.drop('RiskLevel',axis=1))
# 
# from sklearn.preprocessing import StandardScaler
# 
# scaler = StandardScaler()
# 
# scaler.fit(df.drop('RiskLevel',axis=1))
# scaled_features = scaler.transform(df.drop('RiskLevel',axis=1))
# 
# df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])
# x = df[['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']]
# y = df['RiskLevel']
# 
# ### The train_test_split() function splits the data into training and testing sets.
# from sklearn.model_selection import train_test_split
# x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=train_size)
# 
# if prediction_type == 'Logistic':
#   
#   from sklearn.linear_model import LogisticRegression
#   logtracker = OfflineEmissionsTracker(country_iso_code="FRA") # FRA = France
#   logtracker.start()
#   log_start_time = time.time()
#   logmodel = LogisticRegression(multi_class='multinomial', solver='lbfgs')
# 
#   logmodel.fit(x_train, y_train)
#   logpred = logmodel.predict(x_test)
#   logresults = logtracker.stop()
#   log_end_time = time.time()
#   log_execution_time = log_end_time - log_start_time
# 
# 
#   st.write("Execution time:", log_execution_time, "seconds")
#   st.write("Carbon Emissions: ",' %.12f kWh' % logresults)
# 
#   col1,col2 = st.columns(2)
#   col1.subheader("Feature Columns top 25")
#   col1.write(x.head(25))
#   col2.subheader("Target Column top 25")
#   col2.write(y.head(25))
# 
#   st.subheader('ðŸŽ¯ Results')
# 
#   from sklearn.metrics import classification_report
#   st.write(classification_report(y_test,logpred))
#   from sklearn.metrics import confusion_matrix
# 
#   confusion_matrix(y_test, logpred)
#   from sklearn.metrics import accuracy_score
# 
#   y_pred = logmodel.predict(x_test)
# 
#   accuracy = accuracy_score(y_test, y_pred)
# 
# elif prediction_type == 'KNN':
# 
#   from sklearn.neighbors import KNeighborsClassifier
# 
#   knntracker = OfflineEmissionsTracker(country_iso_code="FRA") # FRA = France
#   knntracker.start()
#   knn_start_time = time.time()
#   knn = KNeighborsClassifier(n_neighbors=1)
#   knn.fit(x_train,y_train)
#   knnpred = knn.predict(x_test)
#   knnresults = knntracker.stop()
#   knn_end_time = time.time()
#   knn_execution_time = knn_end_time - knn_start_time
# 
#   st.write("Execution time:", knn_execution_time, "seconds")
#   st.write("Carbon Emissions: ",' %.12f kWh' % knnresults)
#   from sklearn.metrics import classification_report,confusion_matrix
#   st.write(confusion_matrix(y_test,knnpred))
#   st.write(metrics.classification_report(y_test,knnpred))
# 
# else:
# 
#   st.write('Please select a prediction type')
# 
# 
# 
# 
# 
#

!streamlit run app.py & npx localtunnel --port 8501

"""### Congratulations you made it ðŸŽ‰"""